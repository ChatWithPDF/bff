// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [timescaledb, vector]
}

model query {
  id                    String?   @default(uuid()) @db.Uuid
  createdAt             DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime  @updatedAt
  responseTime          Int
  query                 String
  response              String
  queryInEnglish        String
  responseInEnglish     String
  conversationId        String?   @default(uuid()) @db.Uuid
  userId                String    @db.Uuid
  workflowId            Int?
  reaction              Int       @default(0) @db.SmallInt
  workflow              workflow? @relation(fields: [workflowId], references: [id])
  isConversationDeleted Boolean @default(false)
  coreferencedPrompt    String?
  error                 String?
  errorRate             Int       @default(0)
  responseType          String?

  @@unique([userId, createdAt])
  @@unique([userId, createdAt, conversationId])
}

model document {
  createdAt           DateTime                         @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime                         @updatedAt
  id                  Int                              @id @default(autoincrement())
  userId              String?                          @db.Uuid
  tags                String?
  heading             String?
  headingEmbedding    Unsupported("vector")?
  content             String
  contentEmbedding    Unsupported("vector")?
  summary             String?
  summaryEmbedding    Unsupported("vector")?
  pdfId               String?                          @db.Uuid
  pdfName             String?
  metaData            Json?
}

model workflow {
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  content   Json
  query     query[]
}

model prompt_history {
  id                Int                    @id @default(autoincrement())
  createdAt         DateTime               @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime               @updatedAt
  deletedAt         DateTime?              @db.Timestamptz(3)
  responseTime      Int
  queryInEnglish    String
  responseInEnglish String
  timesUsed         Int
  metadata          Json?
  embedding         Unsupported("vector")?
  embeddingType     String?
  pdf               Unsupported("vector")?
  pdfId             String?                @db.Uuid
  queryId           String?                @db.Uuid

  @@unique([queryInEnglish])
}

model config {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  key       String   @unique
  value     String
  metaData  Json?
}

model similarity_search_response {
  id             Int      @id @default(autoincrement())
  documentId     Int
  content        String
  tags           String?
  similarity     Float
  queryId        String  @db.Uuid
}

model speech_to_text {
  id                      Int      @id @default(autoincrement())
  audio                   String
  text                    String
  spell_corrected_text    String
}

model employee {
  employeeId              String   @unique()
  firstName               String
  lastName                String?
  middleName              String?
  email                   String?
  track                   String?
  designation             String?
  role                    String?
  program                 String?
  dateOfJoining           DateTime?
  dateOfBirth             DateTime?
  age                     String?
  gender                  String?
  maritalStatus           String?
  mobileNumber            String?
  presentAddress          String?
  permanentAddress        String?
}